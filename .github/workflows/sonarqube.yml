name: SonarQube

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "main" ]

jobs:
  scan:
    name: Build & SonarQube Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      checks: write
      statuses: write
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # importante para análisis de ramas/PR

      # -- Construye y genera cobertura según tu stack (ejemplo Node) --
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install & Test
        run: |
          npm install
          npm run test

      # -- Scan oficial SonarQube self-hosted --
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # -- Falla el pipeline si no pasa el Quality Gate --
      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@v1
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}


